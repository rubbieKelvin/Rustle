# This is a JSON Schema definition in YAML format.
$schema: http://json-schema.org/draft-07/schema#
title: API Test File
description: Schema for API test definition files in YAML format.
type: object
properties:
  imports:
    type: array
    description: List of paths to other YAML files to import definitions from.
    items:
      type: string
      description: Path to an imported YAML file.
  env:
    type: object
    description: Environment variables configuration. Each variable must specify a 'default' value, and all values must be strings.
    additionalProperties: # Each property key is a variable name (string)
      type: object
      description: Definition for a single environment variable, including default and optional environment-specific string values.
      required:
        - default # Enforce that the 'default' key must be present for every variable
      properties:
        default:
          type: string # Enforce string type for the default value
          description: The default string value for the environment variable.
      patternProperties:
        "^(?!default$).*$": # Allow any other key (representing an environment name) that is not "default"
          type: string # Enforce string type for environment-specific values
          description: String value override for a specific environment.
      additionalProperties: false # Only 'default' and environment names are allowed as keys for a variable definition
  requests:
    type: object
    description: Definitions of named API requests.
    additionalProperties: # Each property key is a request name (string)
      type: object
      description: Definition for a single API request, including method, URL, and optional sections.
      required:
        - method
        - url
      properties:
        method:
          type: string
          description: HTTP method for the request (e.g., GET, POST).
          enum: ["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS", "CONNECT", "TRACE"]
        url:
          type: string
          description: Target URL for the request. Supports variable interpolation ({{...}}).
        config:
          type: object
          description: Request-specific configurations.
          properties:
            depends_on:
              type: array
              description: List of request names that must complete successfully before this request runs.
              items:
                type: string
            delay:
              type: string
              description: Duration to wait before executing the request (e.g., "500ms", "1s").
            timeout:
              type: string
              description: Request timeout duration (e.g., "30s").
            retries:
              type: number
              description: Number of times to retry the request upon failure.
              minimum: 0
              default: 0
          additionalProperties: false # Only defined config keys are allowed
        headers:
          type: object
          description: Request headers. Keys are header names, values are strings (after interpolation).
          additionalProperties:
            type: string # Assuming header values are always strings (after interpolation)
        query:
          type: object
          description: URL query parameters. Keys are parameter names. Values can be various types.
          additionalProperties: # Values can be various types, including lists and objects
            oneOf:
              - { type: string }
              - { type: number }
              - { type: boolean }
              - { type: array, items: {} } # Array values, items can be anything
              - { type: object, additionalProperties: {} } # Object values, keys/values can be anything
              - { type: "null" }
        body:
          type: object
          description: Request body configuration, structured by type.
          required:
            - type
          properties:
            type:
              type: string
              enum:
                [
                  "json",
                  "graphql",
                  "xml",
                  "text",
                  "form-urlencoded",
                  "multipart",
                ]
              description: Specifies the format of the request body content.
          oneOf: # The rest of the schema depends on the value of the 'type' property
            - description: JSON body configuration.
              properties:
                type: { const: "json" }
                content:
                  description: The JSON body content (map or list).
                  oneOf: # JSON can be an object or an array at the top level
                    - { type: object }
                    - { type: array }
                  # Could potentially allow other JSON primitives if the content key is just the value
                  # - { type: string }
                  # - { type: number }
                  # - { type: boolean }
                  # - { type: "null" }
              required: ["type", "content"]
              additionalProperties: false # Only 'type' and 'content' allowed for json body
            - description: GraphQL body configuration.
              properties:
                type: { const: "graphql" }
                query:
                  type: string
                  description: The GraphQL query string (multiline support via YAML literal block |).
                variables:
                  description: Variables for the GraphQL query (JSON structure).
                  oneOf: # GraphQL variables are usually an object or an array
                    - { type: object }
                    - { type: array }
                  # Allow null or exclusion if variables are optional
              required: ["type", "query"]
              # 'variables' is optional
              additionalProperties: false # Only 'type', 'query', and 'variables' allowed for graphql body
            - description: Raw text body configuration (XML, Text, Form-urlencoded).
              properties:
                type: { enum: ["xml", "text", "form-urlencoded"] }
                content:
                  type: string
                  description: The raw body content string (multiline support via YAML literal block |).
              required: ["type", "content"]
              additionalProperties: false # Only 'type' and 'content' allowed for these body types
            - description: Multipart form data body configuration.
              properties:
                type: { const: "multipart" }
                parts:
                  type: array
                  description: List of multipart parts (fields or files).
                  items: # Schema for a single multipart part
                    type: object
                    required: ["kind", "name"]
                    properties:
                      kind:
                        type: string
                        enum: ["field", "file"]
                        description: Type of multipart part ("field" or "file").
                      name:
                        type: string
                        description: Name of the multipart part.
                      value:
                        type: string
                        description: Value for a 'field' part. (Based on spec example)
                      path:
                        type: string
                        description: Path to the file for a 'file' part.
                      mime_type:
                        type: string
                        description: Optional MIME type for a 'file' part.
                    oneOf: # Ensure required fields based on 'kind'
                      - properties:
                          kind: { const: "field" }
                        required: ["value"]
                        not: # Cannot have 'path' or 'mime_type' if kind is 'field'
                          anyOf:
                            - required: ["path"]
                            - required: ["mime_type"]
                      - properties:
                          kind: { const: "file" }
                        required: ["path"]
                        not: # Cannot have 'value' if kind is 'file'
                          required: ["value"]
                    additionalProperties: false # Only defined properties allowed for a multipart part
              required: ["type", "parts"]
              additionalProperties: false # Only 'type' and 'parts' allowed for multipart body
        script:
          type: object
          description: Scripting logic for different phases of the request lifecycle.
          properties:
            post_request:
              type: string
              description: Script code to execute after the request completes (multiline support via YAML literal block |). The syntax and available objects (response, env, etc.) are defined by the processing engine.
            # Add other potential script phases here if the engine supports them (e.g., pre_request)
          additionalProperties: false # Only defined script phase keys are allowed
      additionalProperties: false # Prevent extra keys in a request definition beyond the defined ones
  calls:
    type: object # Changed from array to object
    description: Map of named execution sequences. Each key is a sequence name, and the value is a list of request names to execute in that sequence.
    additionalProperties: # Each property key is a sequence name (string)
      type: array # The value is an array of request names
      items:
        type: string # Each item in the list should be a string corresponding to a request name
additionalProperties: false # Prevent extra top-level keys in the document beyond the defined ones
