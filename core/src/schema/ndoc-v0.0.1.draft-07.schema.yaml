$schema: http://json-schema.org/draft-07/schema#
title: Native doctor File Schema
description: Describes the structure of a Native doctor definition yaml file.
type: object
properties:
  imports:
    type: array
    description: A list of other files to import. Their content is expected to conform to this schema as well, potentially merged.
    items:
      type: string
  env:
    type: object
    description: Environment variables, keyed by environment name (e.g., "dev", "prod"). Each key maps to an EnvironmentVariable definition.
    additionalProperties:
      $ref: "#/definitions/EnvironmentVariable"
  requests:
    type: object
    description: A collection of API request definitions, keyed by a unique request name.
    additionalProperties:
      $ref: "#/definitions/Request"
  calls:
    type: object
    description: Defines sequences of requests (flows or scenarios), keyed by a call name. Each call is a list of request names.
    additionalProperties:
      type: array
      items:
        type: string
        description: The name of a request defined in the 'requests' section.
  project:
    $ref: "#/definitions/Project"
    description: Project definition, containing metadata and high-level configuration for the test suite.

definitions:
  SerdeYamlValue:
    description: Represents any valid YAML/JSON value (string, number, boolean, array, object, null).
    type: [string, number, integer, boolean, array, object, "null"]

  Project:
    type: [object, "null"]
    description: Describes the project from a root file, including metadata and global settings.
    properties:
      name:
        type: string
        description: The mandatory name of the project.
      version:
        type: string
        description: The version of the project.
        default: ""
      description:
        type: string
        description: A short description of the project.
        default: ""
      authors:
        type: array
        description: A list of authors or contributors to the project.
        items:
          $ref: "#/definitions/User"
      generator:
        type: [string, "null"]
        description: Optional path or identifier for an OpenAPI (or similar) spec file from which parts of this test suite might be generated from.
      default_env:
        type: string # This field is default_env in Rust
        description: The name of the environment (from the 'env' section) to be used by default if not otherwise specified.
    required:
      - name

  User:
    type: object
    description: Represents a user, typically an author or contributor.
    properties:
      name:
        type: string
        description: The mandatory name of the user.
      email:
        type: string
        description: The email address of the user.
        format: email # Suggests email format but doesn't strictly enforce without custom validation
        default: ""
    required:
      - name

  EnvironmentVariable:
    type: object
    description: Definition of a single environment variable, including its default value and environment-specific overrides.
    properties:
      default:
        $ref: "#/definitions/SerdeYamlValue"
        description: The default value for the environment variable. This value is used if no environment-specific override is found or if no specific environment is active.
    # For the flattened 'overrides': HashMap<String, serde_yaml::Value>.
    # This allows any other property name (e.g., "dev", "prod", "staging_override") at this level
    # to be an environment-specific override value.
    additionalProperties:
      $ref: "#/definitions/SerdeYamlValue"
    required:
      - default

  Request:
    type: object
    description: Represents a single API request definition. Field names are snake_case as per Rust struct's serde attribute.
    properties:
      method:
        type: string
        description: The HTTP method for the request (e.g., GET, POST, PUT, DELETE).
      url:
        type: string
        description: The URL for the API request. It can contain placeholders for environment variables (e.g., {{base_url}}/users).
        # format: uri-reference # More specific validation
      doc:
        type: string
        description: Optional documentation or a human-readable description for this request.
      config:
        $ref: "#/definitions/RequestConfig"
        description: Optional configuration options for the request execution like dependencies, delay, timeout, and retries.
      headers:
        type: object
        description: Optional HTTP headers for the request. Each key-value pair represents a header name and its value.
        additionalProperties:
          type: string
      query:
        type: [object, "null"]
        description: Optional URL query parameters for the request. Each key-value pair represents a parameter name and its value.
        additionalProperties:
          type: string
      body:
        $ref: "#/definitions/RequestBody"
        description: Optional body of the request, structured according to its type (JSON, XML, GraphQL, etc.).
      script:
        $ref: "#/definitions/RequestScriptConfig"
        description: Optional scripts to be executed before (pre_request) or after (post_request) the request.
    required:
      - method
      - url

  RequestConfig:
    type: [object, "null"]
    description: Configuration settings for a request's execution. Field names are snake_case.
    properties:
      depends_on:
        type: array
        description: A list of request names (defined in the 'requests' section) that this request depends on. These will be executed before this request.
        items:
          type: string
        default: []
      delay:
        type: string
        description: An optional delay to wait before executing the request (e.g., "500ms", "1s", "2m").
        pattern: "^\\d+(ms|s|m)$" # Example pattern for duration
      timeout:
        type: string
        description: An optional timeout for the request (e.g., "30s", "1m"). If the request exceeds this duration, it's considered failed.
        pattern: "^\\d+(ms|s|m)$" # Example pattern for duration
      retries:
        type: integer
        description: Number of times to retry the request on failure.
        minimum: 0
        default: 0
      folder:
        type: string
        description: Where to group this request

  RequestScriptConfig:
    type: [object, "null"]
    description: Configuration for pre-request and post-request scripts. Field names are snake_case.
    properties:
      post_request:
        $ref: "#/definitions/Script"
        description: Script to execute after the request has been completed.
      pre_request:
        $ref: "#/definitions/Script"
        description: Script to execute before the request is sent.

  Script:
    type: object
    description: Represents a script with a specified language and its content. Adjacently tagged by 'language'.
    oneOf:
      - type: object
        title: Lua
        properties:
          language:
            type: string
            const: "lua"
            description: Specifies that the script is written in Lua. ‼️ This has not been implemented yet
          content:
            type: string
            description: The Lua script content.
        required:
          - language
          - content
      - type: object
        title: Javascript
        properties:
          language:
            type: string
            const: "javascript"
            description: Specifies that the script is written in JavaScript. ‼️ This has not been implemented yet
          content:
            type: string
            description: The JavaScript script content.
        required:
          - language
          - content
      - type: object
        title: Rhai
        properties:
          language:
            type: string
            const: "rhai"
            description: Specifies that the script is written in rhai.
          content:
            type: string
            description: The rhai script content.
        required:
          - language
          - content

  RequestBody:
    type: object
    description: Represents the body of an HTTP request, discriminated by the 'type' field. Field names for variants are snake_case.
    oneOf:
      - type: object
        title: JsonBody
        properties:
          type:
            type: string
            const: "json"
            description: Indicates a JSON request body.
          content:
            $ref: "#/definitions/SerdeYamlValue" # Allows any valid JSON structure (object or array)
            description: The JSON content of the body.
        required:
          - type
          - content
      - type: object
        title: GraphqlBody
        properties:
          type:
            type: string
            const: "graphql"
            description: Indicates a GraphQL request body.
          query:
            type: string
            description: The GraphQL query string.
          variables:
            $ref: "#/definitions/SerdeYamlValue" # GraphQL variables as a JSON-like structure
            description: Optional variables for the GraphQL query.
        required:
          - type
          - query
      - type: object
        title: XmlBody
        properties:
          type:
            type: string
            const: "xml"
            description: Indicates an XML request body.
          content:
            type: string
            description: The XML content as a string.
        required:
          - type
          - content
      - type: object
        title: TextBody
        properties:
          type:
            type: string
            const: "text"
            description: Indicates a plain text request body.
          content:
            type: string
            description: The text content.
        required:
          - type
          - content
      - type: object
        title: FormUrlencodedBody
        properties:
          type:
            type: string
            const: "form-urlencoded"
            description: Indicates a form URL-encoded request body (application/x-www-form-urlencoded).
          content:
            type: string
            description: The form URL-encoded string (e.g., key1=value1&key2=value2).
        required:
          - type
          - content
      - type: object
        title: MultipartBody
        properties:
          type:
            type: string
            const: "multipart"
            description: Indicates a multipart/form-data request body.
          parts:
            type: array
            description: A list of parts for the multipart body, each being a field or a file.
            items:
              $ref: "#/definitions/MultipartPart"
        required:
          - type
          - parts
      - type: "null"

  MultipartPart:
    type: object
    description: Represents a single part within a multipart request body, discriminated by the 'kind' field. Field names for variants are snake_case.
    oneOf:
      - type: object
        title: MultipartField
        properties:
          kind:
            type: string
            const: "field"
            description: Indicates this part is a simple text field.
          name:
            type: string
            description: The name of the form field.
          value:
            type: string
            description: The value of the form field.
        required:
          - kind
          - name
          - value
      - type: object
        title: MultipartFile
        properties:
          kind:
            type: string
            const: "file"
            description: Indicates this part is a file to be uploaded.
          name:
            type: string
            description: The name of the form field associated with the file.
          path:
            type: string
            description: The local file system path to the file to be uploaded.
          mime_type: # snake_case in Rust struct
            type: string
            description: Optional MIME type of the file (e.g., "image/jpeg", "application/pdf"). If not provided, it might be inferred.
        required:
          - kind
          - name
          - path